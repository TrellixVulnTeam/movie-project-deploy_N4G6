{"ast":null,"code":"// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n(function (expose) {\n  /**\n   *  class Markdown\n   *\n   *  Markdown processing in Javascript done right. We have very particular views\n   *  on what constitutes 'right' which include:\n   *\n   *  - produces well-formed HTML (this means that em and strong nesting is\n   *    important)\n   *\n   *  - has an intermediate representation to allow processing of parsed data (We\n   *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n   *\n   *  - is easily extensible to add new dialects without having to rewrite the\n   *    entire parsing mechanics\n   *\n   *  - has a good test suite\n   *\n   *  This implementation fulfills all of these (except that the test suite could\n   *  do with expanding to automatically run all the fixtures from other Markdown\n   *  implementations.)\n   *\n   *  ##### Intermediate Representation\n   *\n   *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n   *\n   *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n   **/\n  var Markdown = expose.Markdown = function (dialect) {\n    switch (typeof dialect) {\n      case \"undefined\":\n        this.dialect = Markdown.dialects.Gruber;\n        break;\n\n      case \"object\":\n        this.dialect = dialect;\n        break;\n\n      default:\n        if (dialect in Markdown.dialects) {\n          this.dialect = Markdown.dialects[dialect];\n        } else {\n          throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n        }\n\n        break;\n    }\n\n    this.em_state = [];\n    this.strong_state = [];\n    this.debug_indent = \"\";\n  };\n  /**\n   *  parse( markdown, [dialect] ) -> JsonML\n   *  - markdown (String): markdown string to parse\n   *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n   *\n   *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n   **/\n\n\n  expose.parse = function (source, dialect) {\n    // dialect will default if undefined\n    var md = new Markdown(dialect);\n    return md.toTree(source);\n  };\n  /**\n   *  toHTML( markdown, [dialect]  ) -> String\n   *  toHTML( md_tree ) -> String\n   *  - markdown (String): markdown string to parse\n   *  - md_tree (Markdown.JsonML): parsed markdown tree\n   *\n   *  Take markdown (either as a string or as a JsonML tree) and run it through\n   *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n   **/\n\n\n  expose.toHTML = function toHTML(source, dialect, options) {\n    var input = expose.toHTMLTree(source, dialect, options);\n    return expose.renderJsonML(input);\n  };\n  /**\n   *  toHTMLTree( markdown, [dialect] ) -> JsonML\n   *  toHTMLTree( md_tree ) -> JsonML\n   *  - markdown (String): markdown string to parse\n   *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n   *  - md_tree (Markdown.JsonML): parsed markdown tree\n   *\n   *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n   *  to this function, it is first parsed into a markdown tree by calling\n   *  [[parse]].\n   **/\n\n\n  expose.toHTMLTree = function toHTMLTree(input, dialect, options) {\n    // convert string input to an MD tree\n    if (typeof input === \"string\") input = this.parse(input, dialect); // Now convert the MD tree to an HTML tree\n    // remove references from the tree\n\n    var attrs = extract_attr(input),\n        refs = {};\n\n    if (attrs && attrs.references) {\n      refs = attrs.references;\n    }\n\n    var html = convert_tree_to_html(input, refs, options);\n    merge_text_nodes(html);\n    return html;\n  }; // For Spidermonkey based engines\n\n\n  function mk_block_toSource() {\n    return \"Markdown.mk_block( \" + uneval(this.toString()) + \", \" + uneval(this.trailing) + \", \" + uneval(this.lineNumber) + \" )\";\n  } // node\n\n\n  function mk_block_inspect() {\n    var util = require(\"util\");\n\n    return \"Markdown.mk_block( \" + util.inspect(this.toString()) + \", \" + util.inspect(this.trailing) + \", \" + util.inspect(this.lineNumber) + \" )\";\n  }\n\n  var mk_block = Markdown.mk_block = function (block, trail, line) {\n    // Be helpful for default case in tests.\n    if (arguments.length == 1) trail = \"\\n\\n\";\n    var s = new String(block);\n    s.trailing = trail; // To make it clear its not just a string\n\n    s.inspect = mk_block_inspect;\n    s.toSource = mk_block_toSource;\n    if (line != undefined) s.lineNumber = line;\n    return s;\n  };\n\n  function count_lines(str) {\n    var n = 0,\n        i = -1;\n\n    while ((i = str.indexOf(\"\\n\", i + 1)) !== -1) n++;\n\n    return n;\n  } // Internal - split source into rough blocks\n\n\n  Markdown.prototype.split_blocks = function splitBlocks(input, startLine) {\n    input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\"); // [\\s\\S] matches _anything_ (newline or space)\n    // [^] is equivalent but doesn't work in IEs.\n\n    var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n        blocks = [],\n        m;\n    var line_no = 1;\n\n    if ((m = /^(\\s*\\n)/.exec(input)) != null) {\n      // skip (but count) leading blank lines\n      line_no += count_lines(m[0]);\n      re.lastIndex = m[0].length;\n    }\n\n    while ((m = re.exec(input)) !== null) {\n      if (m[2] == \"\\n#\") {\n        m[2] = \"\\n\";\n        re.lastIndex--;\n      }\n\n      blocks.push(mk_block(m[1], m[2], line_no));\n      line_no += count_lines(m[0]);\n    }\n\n    return blocks;\n  };\n  /**\n   *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n   *  - block (String): the block to process\n   *  - next (Array): the following blocks\n   *\n   * Process `block` and return an array of JsonML nodes representing `block`.\n   *\n   * It does this by asking each block level function in the dialect to process\n   * the block until one can. Succesful handling is indicated by returning an\n   * array (with zero or more JsonML nodes), failure by a false value.\n   *\n   * Blocks handlers are responsible for calling [[Markdown#processInline]]\n   * themselves as appropriate.\n   *\n   * If the blocks were split incorrectly or adjacent blocks need collapsing you\n   * can adjust `next` in place using shift/splice etc.\n   *\n   * If any of this default behaviour is not right for the dialect, you can\n   * define a `__call__` method on the dialect that will get invoked to handle\n   * the block processing.\n   */\n\n\n  Markdown.prototype.processBlock = function processBlock(block, next) {\n    var cbs = this.dialect.block,\n        ord = cbs.__order__;\n\n    if (\"__call__\" in cbs) {\n      return cbs.__call__.call(this, block, next);\n    }\n\n    for (var i = 0; i < ord.length; i++) {\n      //D:this.debug( \"Testing\", ord[i] );\n      var res = cbs[ord[i]].call(this, block, next);\n\n      if (res) {\n        //D:this.debug(\"  matched\");\n        if (!isArray(res) || res.length > 0 && !isArray(res[0])) this.debug(ord[i], \"didn't return a proper array\"); //D:this.debug( \"\" );\n\n        return res;\n      }\n    } // Uhoh! no match! Should we throw an error?\n\n\n    return [];\n  };\n\n  Markdown.prototype.processInline = function processInline(block) {\n    return this.dialect.inline.__call__.call(this, String(block));\n  };\n  /**\n   *  Markdown#toTree( source ) -> JsonML\n   *  - source (String): markdown source to parse\n   *\n   *  Parse `source` into a JsonML tree representing the markdown document.\n   **/\n  // custom_tree means set this.tree to `custom_tree` and restore old value on return\n\n\n  Markdown.prototype.toTree = function toTree(source, custom_root) {\n    var blocks = source instanceof Array ? source : this.split_blocks(source); // Make tree a member variable so its easier to mess with in extensions\n\n    var old_tree = this.tree;\n\n    try {\n      this.tree = custom_root || this.tree || [\"markdown\"];\n\n      blocks: while (blocks.length) {\n        var b = this.processBlock(blocks.shift(), blocks); // Reference blocks and the like won't return any content\n\n        if (!b.length) continue blocks;\n        this.tree.push.apply(this.tree, b);\n      }\n\n      return this.tree;\n    } finally {\n      if (custom_root) {\n        this.tree = old_tree;\n      }\n    }\n  }; // Noop by default\n\n\n  Markdown.prototype.debug = function () {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift(this.debug_indent);\n    if (typeof print !== \"undefined\") print.apply(print, args);\n    if (typeof console !== \"undefined\" && typeof console.log !== \"undefined\") console.log.apply(null, args);\n  };\n\n  Markdown.prototype.loop_re_over_block = function (re, block, cb) {\n    // Dont use /g regexps with this\n    var m,\n        b = block.valueOf();\n\n    while (b.length && (m = re.exec(b)) != null) {\n      b = b.substr(m[0].length);\n      cb.call(this, m);\n    }\n\n    return b;\n  };\n  /**\n   * Markdown.dialects\n   *\n   * Namespace of built-in dialects.\n   **/\n\n\n  Markdown.dialects = {};\n  /**\n   * Markdown.dialects.Gruber\n   *\n   * The default dialect that follows the rules set out by John Gruber's\n   * markdown.pl as closely as possible. Well actually we follow the behaviour of\n   * that script which in some places is not exactly what the syntax web page\n   * says.\n   **/\n\n  Markdown.dialects.Gruber = {\n    block: {\n      atxHeader: function atxHeader(block, next) {\n        var m = block.match(/^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/);\n        if (!m) return undefined;\n        var header = [\"header\", {\n          level: m[1].length\n        }];\n        Array.prototype.push.apply(header, this.processInline(m[2]));\n        if (m[0].length < block.length) next.unshift(mk_block(block.substr(m[0].length), block.trailing, block.lineNumber + 2));\n        return [header];\n      },\n      setextHeader: function setextHeader(block, next) {\n        var m = block.match(/^(.*)\\n([-=])\\2\\2+(?:\\n|$)/);\n        if (!m) return undefined;\n        var level = m[2] === \"=\" ? 1 : 2;\n        var header = [\"header\", {\n          level: level\n        }, m[1]];\n        if (m[0].length < block.length) next.unshift(mk_block(block.substr(m[0].length), block.trailing, block.lineNumber + 2));\n        return [header];\n      },\n      code: function code(block, next) {\n        // |    Foo\n        // |bar\n        // should be a code block followed by a paragraph. Fun\n        //\n        // There might also be adjacent code block to merge.\n        var ret = [],\n            re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n            lines; // 4 spaces + content\n\n        if (!block.match(re)) return undefined;\n\n        block_search: do {\n          // Now pull out the rest of the lines\n          var b = this.loop_re_over_block(re, block.valueOf(), function (m) {\n            ret.push(m[1]);\n          });\n\n          if (b.length) {\n            // Case alluded to in first comment. push it back on as a new block\n            next.unshift(mk_block(b, block.trailing));\n            break block_search;\n          } else if (next.length) {\n            // Check the next block - it might be code too\n            if (!next[0].match(re)) break block_search; // Pull how how many blanks lines follow - minus two to account for .join\n\n            ret.push(block.trailing.replace(/[^\\n]/g, \"\").substring(2));\n            block = next.shift();\n          } else {\n            break block_search;\n          }\n        } while (true);\n\n        return [[\"code_block\", ret.join(\"\\n\")]];\n      },\n      horizRule: function horizRule(block, next) {\n        // this needs to find any hr in the block to handle abutting blocks\n        var m = block.match(/^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/);\n\n        if (!m) {\n          return undefined;\n        }\n\n        var jsonml = [[\"hr\"]]; // if there's a leading abutting block, process it\n\n        if (m[1]) {\n          jsonml.unshift.apply(jsonml, this.processBlock(m[1], []));\n        } // if there's a trailing abutting block, stick it into next\n\n\n        if (m[3]) {\n          next.unshift(mk_block(m[3]));\n        }\n\n        return jsonml;\n      },\n      // There are two types of lists. Tight and loose. Tight lists have no whitespace\n      // between the items (and result in text just in the <li>) and loose lists,\n      // which have an empty line between list items, resulting in (one or more)\n      // paragraphs inside the <li>.\n      //\n      // There are all sorts weird edge cases about the original markdown.pl's\n      // handling of lists:\n      //\n      // * Nested lists are supposed to be indented by four chars per level. But\n      //   if they aren't, you can get a nested list by indenting by less than\n      //   four so long as the indent doesn't match an indent of an existing list\n      //   item in the 'nest stack'.\n      //\n      // * The type of the list (bullet or number) is controlled just by the\n      //    first item at the indent. Subsequent changes are ignored unless they\n      //    are for nested lists\n      //\n      lists: function () {\n        // Use a closure to hide a few variables.\n        var any_list = \"[*+-]|\\\\d+\\\\.\",\n            bullet_list = /[*+-]/,\n            number_list = /\\d+\\./,\n            // Capture leading indent as it matters for determining nested lists.\n        is_list_re = new RegExp(\"^( {0,3})(\" + any_list + \")[ \\t]+\"),\n            indent_re = \"(?: {0,3}\\\\t| {4})\"; // TODO: Cache this regexp for certain depths.\n        // Create a regexp suitable for matching an li for a given stack depth\n\n        function regex_for_depth(depth) {\n          return new RegExp( // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" + // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth - 1) + \"}[ ]{0,4})\");\n        }\n\n        function expand_tab(input) {\n          return input.replace(/ {0,3}\\t/g, \"    \");\n        } // Add inline content `inline` to `li`. inline comes from processInline\n        // so is an array of content\n\n\n        function add(li, loose, inline, nl) {\n          if (loose) {\n            li.push([\"para\"].concat(inline));\n            return;\n          } // Hmmm, should this be any block level element or just paras?\n\n\n          var add_to = li[li.length - 1] instanceof Array && li[li.length - 1][0] == \"para\" ? li[li.length - 1] : li; // If there is already some content in this list, add the new line in\n\n          if (nl && li.length > 1) inline.unshift(nl);\n\n          for (var i = 0; i < inline.length; i++) {\n            var what = inline[i],\n                is_str = typeof what == \"string\";\n\n            if (is_str && add_to.length > 1 && typeof add_to[add_to.length - 1] == \"string\") {\n              add_to[add_to.length - 1] += what;\n            } else {\n              add_to.push(what);\n            }\n          }\n        } // contained means have an indent greater than the current one. On\n        // *every* line in the block\n\n\n        function get_contained_blocks(depth, blocks) {\n          var re = new RegExp(\"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\"),\n              replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n              ret = [];\n\n          while (blocks.length > 0) {\n            if (re.exec(blocks[0])) {\n              var b = blocks.shift(),\n                  // Now remove that indent\n              x = b.replace(replace, \"\");\n              ret.push(mk_block(x, b.trailing, b.lineNumber));\n            } else {\n              break;\n            }\n          }\n\n          return ret;\n        } // passed to stack.forEach to turn list items up the stack into paras\n\n\n        function paragraphify(s, i, stack) {\n          var list = s.list;\n          var last_li = list[list.length - 1];\n\n          if (last_li[1] instanceof Array && last_li[1][0] == \"para\") {\n            return;\n          }\n\n          if (i + 1 == stack.length) {\n            // Last stack frame\n            // Keep the same array, but replace the contents\n            last_li.push([\"para\"].concat(last_li.splice(1, last_li.length - 1)));\n          } else {\n            var sublist = last_li.pop();\n            last_li.push([\"para\"].concat(last_li.splice(1, last_li.length - 1)), sublist);\n          }\n        } // The matcher function\n\n\n        return function (block, next) {\n          var m = block.match(is_list_re);\n          if (!m) return undefined;\n\n          function make_list(m) {\n            var list = bullet_list.exec(m[2]) ? [\"bulletlist\"] : [\"numberlist\"];\n            stack.push({\n              list: list,\n              indent: m[1]\n            });\n            return list;\n          }\n\n          var stack = [],\n              // Stack of lists for nesting.\n          list = make_list(m),\n              last_li,\n              loose = false,\n              ret = [stack[0].list],\n              i; // Loop to search over block looking for inner block elements and loose lists\n\n          loose_search: while (true) {\n            // Split into lines preserving new lines at end of line\n            var lines = block.split(/(?=\\n)/); // We have to grab all lines for a li and call processInline on them\n            // once as there are some inline things that can span lines.\n\n            var li_accumulate = \"\"; // Loop over the lines in this block looking for tight lists.\n\n            tight_search: for (var line_no = 0; line_no < lines.length; line_no++) {\n              var nl = \"\",\n                  l = lines[line_no].replace(/^\\n/, function (n) {\n                nl = n;\n                return \"\";\n              }); // TODO: really should cache this\n\n              var line_re = regex_for_depth(stack.length);\n              m = l.match(line_re); //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n              // We have a list item\n\n              if (m[1] !== undefined) {\n                // Process the previous list item, if any\n                if (li_accumulate.length) {\n                  add(last_li, loose, this.processInline(li_accumulate), nl); // Loose mode will have been dealt with. Reset it\n\n                  loose = false;\n                  li_accumulate = \"\";\n                }\n\n                m[1] = expand_tab(m[1]);\n                var wanted_depth = Math.floor(m[1].length / 4) + 1; //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n\n                if (wanted_depth > stack.length) {\n                  // Deep enough for a nested list outright\n                  //print ( \"new nested list\" );\n                  list = make_list(m);\n                  last_li.push(list);\n                  last_li = list[1] = [\"listitem\"];\n                } else {\n                  // We aren't deep enough to be strictly a new level. This is\n                  // where Md.pl goes nuts. If the indent matches a level in the\n                  // stack, put it there, else put it one deeper then the\n                  // wanted_depth deserves.\n                  var found = false;\n\n                  for (i = 0; i < stack.length; i++) {\n                    if (stack[i].indent != m[1]) continue;\n                    list = stack[i].list;\n                    stack.splice(i + 1, stack.length - (i + 1));\n                    found = true;\n                    break;\n                  }\n\n                  if (!found) {\n                    //print(\"not found. l:\", uneval(l));\n                    wanted_depth++;\n\n                    if (wanted_depth <= stack.length) {\n                      stack.splice(wanted_depth, stack.length - wanted_depth); //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n\n                      list = stack[wanted_depth - 1].list; //print(\"list:\", uneval(list) );\n                    } else {\n                      //print (\"made new stack for messy indent\");\n                      list = make_list(m);\n                      last_li.push(list);\n                    }\n                  } //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n\n\n                  last_li = [\"listitem\"];\n                  list.push(last_li);\n                } // end depth of shenegains\n\n\n                nl = \"\";\n              } // Add content\n\n\n              if (l.length > m[0].length) {\n                li_accumulate += nl + l.substr(m[0].length);\n              }\n            } // tight_search\n\n\n            if (li_accumulate.length) {\n              add(last_li, loose, this.processInline(li_accumulate), nl); // Loose mode will have been dealt with. Reset it\n\n              loose = false;\n              li_accumulate = \"\";\n            } // Look at the next block - we might have a loose list. Or an extra\n            // paragraph for the current li\n\n\n            var contained = get_contained_blocks(stack.length, next); // Deal with code blocks or properly nested lists\n\n            if (contained.length > 0) {\n              // Make sure all listitems up the stack are paragraphs\n              forEach(stack, paragraphify, this);\n              last_li.push.apply(last_li, this.toTree(contained, []));\n            }\n\n            var next_block = next[0] && next[0].valueOf() || \"\";\n\n            if (next_block.match(is_list_re) || next_block.match(/^ /)) {\n              block = next.shift(); // Check for an HR following a list: features/lists/hr_abutting\n\n              var hr = this.dialect.block.horizRule(block, next);\n\n              if (hr) {\n                ret.push.apply(ret, hr);\n                break;\n              } // Make sure all listitems up the stack are paragraphs\n\n\n              forEach(stack, paragraphify, this);\n              loose = true;\n              continue loose_search;\n            }\n\n            break;\n          } // loose_search\n\n\n          return ret;\n        };\n      }(),\n      blockquote: function blockquote(block, next) {\n        if (!block.match(/^>/m)) return undefined;\n        var jsonml = []; // separate out the leading abutting block, if any. I.e. in this case:\n        //\n        //  a\n        //  > b\n        //\n\n        if (block[0] != \">\") {\n          var lines = block.split(/\\n/),\n              prev = [],\n              line_no = block.lineNumber; // keep shifting lines until you find a crotchet\n\n          while (lines.length && lines[0][0] != \">\") {\n            prev.push(lines.shift());\n            line_no++;\n          }\n\n          var abutting = mk_block(prev.join(\"\\n\"), \"\\n\", block.lineNumber);\n          jsonml.push.apply(jsonml, this.processBlock(abutting, [])); // reassemble new block of just block quotes!\n\n          block = mk_block(lines.join(\"\\n\"), block.trailing, line_no);\n        } // if the next block is also a blockquote merge it in\n\n\n        while (next.length && next[0][0] == \">\") {\n          var b = next.shift();\n          block = mk_block(block + block.trailing + b, b.trailing, block.lineNumber);\n        } // Strip off the leading \"> \" and re-process as a block.\n\n\n        var input = block.replace(/^> ?/gm, \"\"),\n            old_tree = this.tree,\n            processedBlock = this.toTree(input, [\"blockquote\"]),\n            attr = extract_attr(processedBlock); // If any link references were found get rid of them\n\n        if (attr && attr.references) {\n          delete attr.references; // And then remove the attribute object if it's empty\n\n          if (isEmpty(attr)) {\n            processedBlock.splice(1, 1);\n          }\n        }\n\n        jsonml.push(processedBlock);\n        return jsonml;\n      },\n      referenceDefn: function referenceDefn(block, next) {\n        var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/; // interesting matches are [ , ref_id, url, , title, title ]\n\n        if (!block.match(re)) return undefined; // make an attribute node if it doesn't exist\n\n        if (!extract_attr(this.tree)) {\n          this.tree.splice(1, 0, {});\n        }\n\n        var attrs = extract_attr(this.tree); // make a references hash if it doesn't exist\n\n        if (attrs.references === undefined) {\n          attrs.references = {};\n        }\n\n        var b = this.loop_re_over_block(re, block, function (m) {\n          if (m[2] && m[2][0] == \"<\" && m[2][m[2].length - 1] == \">\") m[2] = m[2].substring(1, m[2].length - 1);\n          var ref = attrs.references[m[1].toLowerCase()] = {\n            href: m[2]\n          };\n          if (m[4] !== undefined) ref.title = m[4];else if (m[5] !== undefined) ref.title = m[5];\n        });\n        if (b.length) next.unshift(mk_block(b, block.trailing));\n        return [];\n      },\n      para: function para(block, next) {\n        // everything's a para!\n        return [[\"para\"].concat(this.processInline(block))];\n      }\n    }\n  };\n  Markdown.dialects.Gruber.inline = {\n    __oneElement__: function oneElement(text, patterns_or_re, previous_nodes) {\n      var m,\n          res,\n          lastIndex = 0;\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp(\"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\");\n      m = re.exec(text);\n\n      if (!m) {\n        // Just boring text\n        return [text.length, text];\n      } else if (m[1]) {\n        // Some un-interesting text matched. Return that first\n        return [m[1].length, m[1]];\n      }\n\n      var res;\n\n      if (m[2] in this.dialect.inline) {\n        res = this.dialect.inline[m[2]].call(this, text.substr(m.index), m, previous_nodes || []);\n      } // Default for now to make dev easier. just slurp special and output it.\n\n\n      res = res || [m[2].length, m[2]];\n      return res;\n    },\n    __call__: function inline(text, patterns) {\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if (typeof x == \"string\" && typeof out[out.length - 1] == \"string\") out[out.length - 1] += x;else out.push(x);\n      }\n\n      while (text.length > 0) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out);\n        text = text.substr(res.shift());\n        forEach(res, add);\n      }\n\n      return out;\n    },\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n    __escape__: /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n    \"\\\\\": function escaped(text) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if (this.dialect.inline.__escape__.exec(text)) return [2, text.charAt(1)];else // Not an esacpe\n        return [1, \"\\\\\"];\n    },\n    \"![\": function image(text) {\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match(/^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/);\n\n      if (m) {\n        if (m[2] && m[2][0] == \"<\" && m[2][m[2].length - 1] == \">\") m[2] = m[2].substring(1, m[2].length - 1);\n        m[2] = this.dialect.inline.__call__.call(this, m[2], /\\\\/)[0];\n        var attrs = {\n          alt: m[1],\n          href: m[2] || \"\"\n        };\n        if (m[4] !== undefined) attrs.title = m[4];\n        return [m[0].length, [\"img\", attrs]];\n      } // ![Alt text][id]\n\n\n      m = text.match(/^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/);\n\n      if (m) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [m[0].length, [\"img_ref\", {\n          alt: m[1],\n          ref: m[2].toLowerCase(),\n          original: m[0]\n        }]];\n      } // Just consume the '!['\n\n\n      return [2, \"![\"];\n    },\n    \"[\": function link(text) {\n      var orig = String(text); // Inline content is possible inside `link text`\n\n      var res = Markdown.DialectHelpers.inline_until_char.call(this, text.substr(1), \"]\"); // No closing ']' found. Just consume the [\n\n      if (!res) return [1, \"[\"];\n      var consumed = 1 + res[0],\n          children = res[1],\n          link,\n          attrs; // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n\n      text = text.substr(consumed); // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n\n      var m = text.match(/^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/);\n\n      if (m) {\n        var url = m[1];\n        consumed += m[0].length;\n        if (url && url[0] == \"<\" && url[url.length - 1] == \">\") url = url.substring(1, url.length - 1); // If there is a title we don't have to worry about parens in the url\n\n        if (!m[3]) {\n          var open_parens = 1; // One open that isn't in the capture\n\n          for (var len = 0; len < url.length; len++) {\n            switch (url[len]) {\n              case \"(\":\n                open_parens++;\n                break;\n\n              case \")\":\n                if (--open_parens == 0) {\n                  consumed -= url.length - len;\n                  url = url.substring(0, len);\n                }\n\n                break;\n            }\n          }\n        } // Process escapes only\n\n\n        url = this.dialect.inline.__call__.call(this, url, /\\\\/)[0];\n        attrs = {\n          href: url || \"\"\n        };\n        if (m[3] !== undefined) attrs.title = m[3];\n        link = [\"link\", attrs].concat(children);\n        return [consumed, link];\n      } // [Alt text][id]\n      // [Alt text] [id]\n\n\n      m = text.match(/^\\s*\\[(.*?)\\]/);\n\n      if (m) {\n        consumed += m[0].length; // [links][] uses links as its reference\n\n        attrs = {\n          ref: (m[1] || String(children)).toLowerCase(),\n          original: orig.substr(0, consumed)\n        };\n        link = [\"link_ref\", attrs].concat(children); // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n\n        return [consumed, link];\n      } // [id]\n      // Only if id is plain (no formatting.)\n\n\n      if (children.length == 1 && typeof children[0] == \"string\") {\n        attrs = {\n          ref: children[0].toLowerCase(),\n          original: orig.substr(0, consumed)\n        };\n        link = [\"link_ref\", attrs, children[0]];\n        return [consumed, link];\n      } // Just consume the \"[\"\n\n\n      return [1, \"[\"];\n    },\n    \"<\": function autoLink(text) {\n      var m;\n\n      if ((m = text.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/)) != null) {\n        if (m[3]) {\n          return [m[0].length, [\"link\", {\n            href: \"mailto:\" + m[3]\n          }, m[3]]];\n        } else if (m[2] == \"mailto\") {\n          return [m[0].length, [\"link\", {\n            href: m[1]\n          }, m[1].substr(\"mailto:\".length)]];\n        } else return [m[0].length, [\"link\", {\n          href: m[1]\n        }, m[1]]];\n      }\n\n      return [1, \"<\"];\n    },\n    \"`\": function inlineCode(text) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match(/(`+)(([\\s\\S]*?)\\1)/);\n      if (m && m[2]) return [m[1].length + m[2].length, [\"inlinecode\", m[3]]];else {\n        // TODO: No matching end code found - warn!\n        return [1, \"`\"];\n      }\n    },\n    \"  \\n\": function lineBreak(text) {\n      return [3, [\"linebreak\"]];\n    }\n  }; // Meta Helper/generator method for em and strong handling\n\n  function strong_em(tag, md) {\n    var state_slot = tag + \"_state\",\n        other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n    function CloseTag(len) {\n      this.len_after = len;\n      this.name = \"close_\" + md;\n    }\n\n    return function (text, orig_match) {\n      if (this[state_slot][0] == md) {\n        // Most recent em is of this type\n        //D:this.debug(\"closing\", md);\n        this[state_slot].shift(); // \"Consume\" everything to go back to the recrusion in the else-block below\n\n        return [text.length, new CloseTag(text.length - md.length)];\n      } else {\n        // Store a clone of the em/strong states\n        var other = this[other_slot].slice(),\n            state = this[state_slot].slice();\n        this[state_slot].unshift(md); //D:this.debug_indent += \"  \";\n        // Recurse\n\n        var res = this.processInline(text.substr(md.length)); //D:this.debug_indent = this.debug_indent.substr(2);\n\n        var last = res[res.length - 1]; //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n        var check = this[state_slot].shift();\n\n        if (last instanceof CloseTag) {\n          res.pop(); // We matched! Huzzah.\n\n          var consumed = text.length - last.len_after;\n          return [consumed, [tag].concat(res)];\n        } else {\n          // Restore the state of the other kind. We might have mistakenly closed it.\n          this[other_slot] = other;\n          this[state_slot] = state; // We can't reuse the processed result as it could have wrong parsing contexts in it.\n\n          return [md.length, md];\n        }\n      }\n    }; // End returned function\n  }\n\n  Markdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\n  Markdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\n  Markdown.dialects.Gruber.inline[\"*\"] = strong_em(\"em\", \"*\");\n  Markdown.dialects.Gruber.inline[\"_\"] = strong_em(\"em\", \"_\"); // Build default order from insertion order.\n\n  Markdown.buildBlockOrder = function (d) {\n    var ord = [];\n\n    for (var i in d) {\n      if (i == \"__order__\" || i == \"__call__\") continue;\n      ord.push(i);\n    }\n\n    d.__order__ = ord;\n  }; // Build patterns for inline matcher\n\n\n  Markdown.buildInlinePatterns = function (d) {\n    var patterns = [];\n\n    for (var i in d) {\n      // __foo__ is reserved and not a pattern\n      if (i.match(/^__.*__$/)) continue;\n      var l = i.replace(/([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\").replace(/\\n/, \"\\\\n\");\n      patterns.push(i.length == 1 ? l : \"(?:\" + l + \")\");\n    }\n\n    patterns = patterns.join(\"|\");\n    d.__patterns__ = patterns; //print(\"patterns:\", uneval( patterns ) );\n\n    var fn = d.__call__;\n\n    d.__call__ = function (text, pattern) {\n      if (pattern != undefined) {\n        return fn.call(this, text, pattern);\n      } else {\n        return fn.call(this, text, patterns);\n      }\n    };\n  };\n\n  Markdown.DialectHelpers = {};\n\n  Markdown.DialectHelpers.inline_until_char = function (text, want) {\n    var consumed = 0,\n        nodes = [];\n\n    while (true) {\n      if (text.charAt(consumed) == want) {\n        // Found the character we were looking for\n        consumed++;\n        return [consumed, nodes];\n      }\n\n      if (consumed >= text.length) {\n        // No closing char found. Abort.\n        return null;\n      }\n\n      var res = this.dialect.inline.__oneElement__.call(this, text.substr(consumed));\n\n      consumed += res[0]; // Add any returned nodes.\n\n      nodes.push.apply(nodes, res.slice(1));\n    }\n  }; // Helper function to make sub-classing a dialect easier\n\n\n  Markdown.subclassDialect = function (d) {\n    function Block() {}\n\n    Block.prototype = d.block;\n\n    function Inline() {}\n\n    Inline.prototype = d.inline;\n    return {\n      block: new Block(),\n      inline: new Inline()\n    };\n  };\n\n  Markdown.buildBlockOrder(Markdown.dialects.Gruber.block);\n  Markdown.buildInlinePatterns(Markdown.dialects.Gruber.inline);\n  Markdown.dialects.Maruku = Markdown.subclassDialect(Markdown.dialects.Gruber);\n\n  Markdown.dialects.Maruku.processMetaHash = function processMetaHash(meta_string) {\n    var meta = split_meta_hash(meta_string),\n        attr = {};\n\n    for (var i = 0; i < meta.length; ++i) {\n      // id: #foo\n      if (/^#/.test(meta[i])) {\n        attr.id = meta[i].substring(1);\n      } // class: .foo\n      else if (/^\\./.test(meta[i])) {\n        // if class already exists, append the new one\n        if (attr[\"class\"]) {\n          attr[\"class\"] = attr[\"class\"] + meta[i].replace(/./, \" \");\n        } else {\n          attr[\"class\"] = meta[i].substring(1);\n        }\n      } // attribute: foo=bar\n      else if (/\\=/.test(meta[i])) {\n        var s = meta[i].split(/\\=/);\n        attr[s[0]] = s[1];\n      }\n    }\n\n    return attr;\n  };\n\n  function split_meta_hash(meta_string) {\n    var meta = meta_string.split(\"\"),\n        parts = [\"\"],\n        in_quotes = false;\n\n    while (meta.length) {\n      var letter = meta.shift();\n\n      switch (letter) {\n        case \" \":\n          // if we're in a quoted section, keep it\n          if (in_quotes) {\n            parts[parts.length - 1] += letter;\n          } // otherwise make a new part\n          else {\n            parts.push(\"\");\n          }\n\n          break;\n\n        case \"'\":\n        case '\"':\n          // reverse the quotes and move straight on\n          in_quotes = !in_quotes;\n          break;\n\n        case \"\\\\\":\n          // shift off the next letter to be used straight away.\n          // it was escaped so we'll keep it whatever it is\n          letter = meta.shift();\n\n        default:\n          parts[parts.length - 1] += letter;\n          break;\n      }\n    }\n\n    return parts;\n  }\n\n  Markdown.dialects.Maruku.block.document_meta = function document_meta(block, next) {\n    // we're only interested in the first block\n    if (block.lineNumber > 1) return undefined; // document_meta blocks consist of one or more lines of `Key: Value\\n`\n\n    if (!block.match(/^(?:\\w+:.*\\n)*\\w+:.*$/)) return undefined; // make an attribute node if it doesn't exist\n\n    if (!extract_attr(this.tree)) {\n      this.tree.splice(1, 0, {});\n    }\n\n    var pairs = block.split(/\\n/);\n\n    for (p in pairs) {\n      var m = pairs[p].match(/(\\w+):\\s*(.*)$/),\n          key = m[1].toLowerCase(),\n          value = m[2];\n      this.tree[1][key] = value;\n    } // document_meta produces no content!\n\n\n    return [];\n  };\n\n  Markdown.dialects.Maruku.block.block_meta = function block_meta(block, next) {\n    // check if the last line of the block is an meta hash\n    var m = block.match(/(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/);\n    if (!m) return undefined; // process the meta hash\n\n    var attr = this.dialect.processMetaHash(m[2]);\n    var hash; // if we matched ^ then we need to apply meta to the previous block\n\n    if (m[1] === \"\") {\n      var node = this.tree[this.tree.length - 1];\n      hash = extract_attr(node); // if the node is a string (rather than JsonML), bail\n\n      if (typeof node === \"string\") return undefined; // create the attribute hash if it doesn't exist\n\n      if (!hash) {\n        hash = {};\n        node.splice(1, 0, hash);\n      } // add the attributes in\n\n\n      for (a in attr) {\n        hash[a] = attr[a];\n      } // return nothing so the meta hash is removed\n\n\n      return [];\n    } // pull the meta hash off the block and process what's left\n\n\n    var b = block.replace(/\\n.*$/, \"\"),\n        result = this.processBlock(b, []); // get or make the attributes hash\n\n    hash = extract_attr(result[0]);\n\n    if (!hash) {\n      hash = {};\n      result[0].splice(1, 0, hash);\n    } // attach the attributes to the block\n\n\n    for (a in attr) {\n      hash[a] = attr[a];\n    }\n\n    return result;\n  };\n\n  Markdown.dialects.Maruku.block.definition_list = function definition_list(block, next) {\n    // one or more terms followed by one or more definitions, in a single block\n    var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n        list = [\"dl\"],\n        i,\n        m; // see if we're dealing with a tight or loose block\n\n    if (m = block.match(tight)) {\n      // pull subsequent tight DL blocks out of `next`\n      var blocks = [block];\n\n      while (next.length && tight.exec(next[0])) {\n        blocks.push(next.shift());\n      }\n\n      for (var b = 0; b < blocks.length; ++b) {\n        var m = blocks[b].match(tight),\n            terms = m[1].replace(/\\n$/, \"\").split(/\\n/),\n            defns = m[2].split(/\\n:\\s+/); // print( uneval( m ) );\n\n        for (i = 0; i < terms.length; ++i) {\n          list.push([\"dt\", terms[i]]);\n        }\n\n        for (i = 0; i < defns.length; ++i) {\n          // run inline processing over the definition\n          list.push([\"dd\"].concat(this.processInline(defns[i].replace(/(\\n)\\s+/, \"$1\"))));\n        }\n      }\n    } else {\n      return undefined;\n    }\n\n    return [list];\n  }; // splits on unescaped instances of @ch. If @ch is not a character the result\n  // can be unpredictable\n\n\n  Markdown.dialects.Maruku.block.table = function table(block, next) {\n    var _split_on_unescaped = function (s, ch) {\n      ch = ch || '\\\\s';\n\n      if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) {\n        ch = '\\\\' + ch;\n      }\n\n      var res = [],\n          r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n          m;\n\n      while (m = s.match(r)) {\n        res.push(m[1]);\n        s = m[2];\n      }\n\n      res.push(s);\n      return res;\n    };\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n    no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i,\n        m;\n\n    if (m = block.match(leading_pipe)) {\n      // remove leading pipes in contents\n      // (header and horizontal rule already have the leading pipe left out)\n      m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (!(m = block.match(no_leading_pipe))) {\n      return undefined;\n    }\n\n    var table = [\"table\", [\"thead\", [\"tr\"]], [\"tbody\"]]; // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|'); // process alignment\n\n    var html_attrs = [];\n    forEach(m[2], function (s) {\n      if (s.match(/^\\s*-+:\\s*$/)) html_attrs.push({\n        align: \"right\"\n      });else if (s.match(/^\\s*:-+\\s*$/)) html_attrs.push({\n        align: \"left\"\n      });else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({\n        align: \"center\"\n      });else html_attrs.push({});\n    }); // now for the header, avoid escaped pipes\n\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n\n    for (i = 0; i < m[1].length; i++) {\n      table[1][1].push(['th', html_attrs[i] || {}].concat(this.processInline(m[1][i].trim())));\n    } // now for body contents\n\n\n    forEach(m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n      var html_row = ['tr'];\n      row = _split_on_unescaped(row, '|');\n\n      for (i = 0; i < row.length; i++) {\n        html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n      }\n\n      table[2].push(html_row);\n    }, this);\n    return [table];\n  };\n\n  Markdown.dialects.Maruku.inline[\"{:\"] = function inline_meta(text, matches, out) {\n    if (!out.length) {\n      return [2, \"{:\"];\n    } // get the preceeding element\n\n\n    var before = out[out.length - 1];\n\n    if (typeof before === \"string\") {\n      return [2, \"{:\"];\n    } // match a meta hash\n\n\n    var m = text.match(/^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/); // no match, false alarm\n\n    if (!m) {\n      return [2, \"{:\"];\n    } // attach the attributes to the preceeding element\n\n\n    var meta = this.dialect.processMetaHash(m[1]),\n        attr = extract_attr(before);\n\n    if (!attr) {\n      attr = {};\n      before.splice(1, 0, attr);\n    }\n\n    for (var k in meta) {\n      attr[k] = meta[k];\n    } // cut out the string and replace it with nothing\n\n\n    return [m[0].length, \"\"];\n  };\n\n  Markdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n  Markdown.buildBlockOrder(Markdown.dialects.Maruku.block);\n  Markdown.buildInlinePatterns(Markdown.dialects.Maruku.inline);\n\n  var isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) == \"[object Array]\";\n  };\n\n  var forEach; // Don't mess with Array.prototype. Its not friendly\n\n  if (Array.prototype.forEach) {\n    forEach = function (arr, cb, thisp) {\n      return arr.forEach(cb, thisp);\n    };\n  } else {\n    forEach = function (arr, cb, thisp) {\n      for (var i = 0; i < arr.length; i++) {\n        cb.call(thisp || arr, arr[i], i, arr);\n      }\n    };\n  }\n\n  var isEmpty = function (obj) {\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  function extract_attr(jsonml) {\n    return isArray(jsonml) && jsonml.length > 1 && typeof jsonml[1] === \"object\" && !isArray(jsonml[1]) ? jsonml[1] : undefined;\n  }\n  /**\n   *  renderJsonML( jsonml[, options] ) -> String\n   *  - jsonml (Array): JsonML array to render to XML\n   *  - options (Object): options\n   *\n   *  Converts the given JsonML into well-formed XML.\n   *\n   *  The options currently understood are:\n   *\n   *  - root (Boolean): wether or not the root node should be included in the\n   *    output, or just its children. The default `false` is to not include the\n   *    root itself.\n   */\n\n\n  expose.renderJsonML = function (jsonml, options) {\n    options = options || {}; // include the root element in the rendered output?\n\n    options.root = options.root || false;\n    var content = [];\n\n    if (options.root) {\n      content.push(render_tree(jsonml));\n    } else {\n      jsonml.shift(); // get rid of the tag\n\n      if (jsonml.length && typeof jsonml[0] === \"object\" && !(jsonml[0] instanceof Array)) {\n        jsonml.shift(); // get rid of the attributes\n      }\n\n      while (jsonml.length) {\n        content.push(render_tree(jsonml.shift()));\n      }\n    }\n\n    return content.join(\"\\n\\n\");\n  };\n\n  function escapeHTML(text) {\n    return text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n  }\n\n  function render_tree(jsonml) {\n    // basic case\n    if (typeof jsonml === \"string\") {\n      return escapeHTML(jsonml);\n    }\n\n    var tag = jsonml.shift(),\n        attributes = {},\n        content = [];\n\n    if (jsonml.length && typeof jsonml[0] === \"object\" && !(jsonml[0] instanceof Array)) {\n      attributes = jsonml.shift();\n    }\n\n    while (jsonml.length) {\n      content.push(render_tree(jsonml.shift()));\n    }\n\n    var tag_attrs = \"\";\n\n    for (var a in attributes) {\n      tag_attrs += \" \" + a + '=\"' + escapeHTML(attributes[a]) + '\"';\n    } // be careful about adding whitespace here for inline elements\n\n\n    if (tag == \"img\" || tag == \"br\" || tag == \"hr\") {\n      return \"<\" + tag + tag_attrs + \"/>\";\n    } else {\n      return \"<\" + tag + tag_attrs + \">\" + content.join(\"\") + \"</\" + tag + \">\";\n    }\n  }\n\n  function convert_tree_to_html(tree, references, options) {\n    var i;\n    options = options || {}; // shallow clone\n\n    var jsonml = tree.slice(0);\n\n    if (typeof options.preprocessTreeNode === \"function\") {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n    } // Clone attributes if they exist\n\n\n    var attrs = extract_attr(jsonml);\n\n    if (attrs) {\n      jsonml[1] = {};\n\n      for (i in attrs) {\n        jsonml[1][i] = attrs[i];\n      }\n\n      attrs = jsonml[1];\n    } // basic case\n\n\n    if (typeof jsonml === \"string\") {\n      return jsonml;\n    } // convert this node\n\n\n    switch (jsonml[0]) {\n      case \"header\":\n        jsonml[0] = \"h\" + jsonml[1].level;\n        delete jsonml[1].level;\n        break;\n\n      case \"bulletlist\":\n        jsonml[0] = \"ul\";\n        break;\n\n      case \"numberlist\":\n        jsonml[0] = \"ol\";\n        break;\n\n      case \"listitem\":\n        jsonml[0] = \"li\";\n        break;\n\n      case \"para\":\n        jsonml[0] = \"p\";\n        break;\n\n      case \"markdown\":\n        jsonml[0] = \"html\";\n        if (attrs) delete attrs.references;\n        break;\n\n      case \"code_block\":\n        jsonml[0] = \"pre\";\n        i = attrs ? 2 : 1;\n        var code = [\"code\"];\n        code.push.apply(code, jsonml.splice(i, jsonml.length - i));\n        jsonml[i] = code;\n        break;\n\n      case \"inlinecode\":\n        jsonml[0] = \"code\";\n        break;\n\n      case \"img\":\n        jsonml[1].src = jsonml[1].href;\n        delete jsonml[1].href;\n        break;\n\n      case \"linebreak\":\n        jsonml[0] = \"br\";\n        break;\n\n      case \"link\":\n        jsonml[0] = \"a\";\n        break;\n\n      case \"link_ref\":\n        jsonml[0] = \"a\"; // grab this ref and clean up the attribute node\n\n        var ref = references[attrs.ref]; // if the reference exists, make the link\n\n        if (ref) {\n          delete attrs.ref; // add in the href and title, if present\n\n          attrs.href = ref.href;\n\n          if (ref.title) {\n            attrs.title = ref.title;\n          } // get rid of the unneeded original text\n\n\n          delete attrs.original;\n        } // the reference doesn't exist, so revert to plain text\n        else {\n          return attrs.original;\n        }\n\n        break;\n\n      case \"img_ref\":\n        jsonml[0] = \"img\"; // grab this ref and clean up the attribute node\n\n        var ref = references[attrs.ref]; // if the reference exists, make the link\n\n        if (ref) {\n          delete attrs.ref; // add in the href and title, if present\n\n          attrs.src = ref.href;\n\n          if (ref.title) {\n            attrs.title = ref.title;\n          } // get rid of the unneeded original text\n\n\n          delete attrs.original;\n        } // the reference doesn't exist, so revert to plain text\n        else {\n          return attrs.original;\n        }\n\n        break;\n    } // convert all the children\n\n\n    i = 1; // deal with the attribute node, if it exists\n\n    if (attrs) {\n      // if there are keys, skip over it\n      for (var key in jsonml[1]) {\n        i = 2;\n        break;\n      } // if there aren't, remove it\n\n\n      if (i === 1) {\n        jsonml.splice(i, 1);\n      }\n    }\n\n    for (; i < jsonml.length; ++i) {\n      jsonml[i] = convert_tree_to_html(jsonml[i], references, options);\n    }\n\n    return jsonml;\n  } // merges adjacent text nodes into a single node\n\n\n  function merge_text_nodes(jsonml) {\n    // skip the tag name and attribute hash\n    var i = extract_attr(jsonml) ? 2 : 1;\n\n    while (i < jsonml.length) {\n      // if it's a string check the next item too\n      if (typeof jsonml[i] === \"string\") {\n        if (i + 1 < jsonml.length && typeof jsonml[i + 1] === \"string\") {\n          // merge the second string into the first and remove it\n          jsonml[i] += jsonml.splice(i + 1, 1)[0];\n        } else {\n          ++i;\n        }\n      } // if it's not a string recurse\n      else {\n        merge_text_nodes(jsonml[i]);\n        ++i;\n      }\n    }\n  }\n})(function () {\n  if (typeof exports === \"undefined\") {\n    window.markdown = {};\n    return window.markdown;\n  } else {\n    return exports;\n  }\n}());","map":{"version":3,"names":["expose","Markdown","dialect","dialects","Gruber","Error","String","em_state","strong_state","debug_indent","parse","source","md","toTree","toHTML","options","input","toHTMLTree","renderJsonML","attrs","extract_attr","refs","references","html","convert_tree_to_html","merge_text_nodes","mk_block_toSource","uneval","toString","trailing","lineNumber","mk_block_inspect","util","require","inspect","mk_block","block","trail","line","arguments","length","s","toSource","undefined","count_lines","str","n","i","indexOf","prototype","split_blocks","splitBlocks","startLine","replace","re","blocks","m","line_no","exec","lastIndex","push","processBlock","next","cbs","ord","__order__","__call__","call","res","isArray","debug","processInline","inline","custom_root","Array","old_tree","tree","b","shift","apply","args","slice","unshift","print","console","log","loop_re_over_block","cb","valueOf","substr","atxHeader","match","header","level","setextHeader","code","ret","lines","block_search","substring","join","horizRule","jsonml","lists","any_list","bullet_list","number_list","is_list_re","RegExp","indent_re","regex_for_depth","depth","expand_tab","add","li","loose","nl","concat","add_to","what","is_str","get_contained_blocks","x","paragraphify","stack","list","last_li","splice","sublist","pop","make_list","indent","loose_search","split","li_accumulate","tight_search","l","line_re","wanted_depth","Math","floor","found","contained","forEach","next_block","hr","blockquote","prev","abutting","processedBlock","attr","isEmpty","referenceDefn","ref","toLowerCase","href","title","para","__oneElement__","oneElement","text","patterns_or_re","previous_nodes","__patterns__","index","patterns","out","__escape__","escaped","charAt","image","alt","original","link","orig","DialectHelpers","inline_until_char","consumed","children","url","open_parens","len","autoLink","inlineCode","lineBreak","strong_em","tag","state_slot","other_slot","CloseTag","len_after","name","orig_match","other","state","last","check","buildBlockOrder","d","buildInlinePatterns","fn","pattern","want","nodes","subclassDialect","Block","Inline","Maruku","processMetaHash","meta_string","meta","split_meta_hash","test","id","parts","in_quotes","letter","document_meta","pairs","p","key","value","block_meta","hash","node","a","result","definition_list","tight","terms","defns","table","_split_on_unescaped","ch","r","leading_pipe","no_leading_pipe","html_attrs","align","trim","row","html_row","inline_meta","matches","before","k","obj","Object","arr","thisp","hasOwnProperty","root","content","render_tree","escapeHTML","attributes","tag_attrs","preprocessTreeNode","src","exports","window","markdown"],"sources":["/Users/kieran/Documents/Thinkful/movie-project/node_modules/markdown/lib/markdown.js"],"sourcesContent":["// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function( expose ) {\n\n/**\n *  class Markdown\n *\n *  Markdown processing in Javascript done right. We have very particular views\n *  on what constitutes 'right' which include:\n *\n *  - produces well-formed HTML (this means that em and strong nesting is\n *    important)\n *\n *  - has an intermediate representation to allow processing of parsed data (We\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n *\n *  - is easily extensible to add new dialects without having to rewrite the\n *    entire parsing mechanics\n *\n *  - has a good test suite\n *\n *  This implementation fulfills all of these (except that the test suite could\n *  do with expanding to automatically run all the fixtures from other Markdown\n *  implementations.)\n *\n *  ##### Intermediate Representation\n *\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n *\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n **/\nvar Markdown = expose.Markdown = function(dialect) {\n  switch (typeof dialect) {\n    case \"undefined\":\n      this.dialect = Markdown.dialects.Gruber;\n      break;\n    case \"object\":\n      this.dialect = dialect;\n      break;\n    default:\n      if ( dialect in Markdown.dialects ) {\n        this.dialect = Markdown.dialects[dialect];\n      }\n      else {\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n      }\n      break;\n  }\n  this.em_state = [];\n  this.strong_state = [];\n  this.debug_indent = \"\";\n};\n\n/**\n *  parse( markdown, [dialect] ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n **/\nexpose.parse = function( source, dialect ) {\n  // dialect will default if undefined\n  var md = new Markdown( dialect );\n  return md.toTree( source );\n};\n\n/**\n *  toHTML( markdown, [dialect]  ) -> String\n *  toHTML( md_tree ) -> String\n *  - markdown (String): markdown string to parse\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Take markdown (either as a string or as a JsonML tree) and run it through\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n **/\nexpose.toHTML = function toHTML( source , dialect , options ) {\n  var input = expose.toHTMLTree( source , dialect , options );\n\n  return expose.renderJsonML( input );\n};\n\n/**\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\n *  toHTMLTree( md_tree ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n *  to this function, it is first parsed into a markdown tree by calling\n *  [[parse]].\n **/\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\n  // convert string input to an MD tree\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\n\n  // Now convert the MD tree to an HTML tree\n\n  // remove references from the tree\n  var attrs = extract_attr( input ),\n      refs = {};\n\n  if ( attrs && attrs.references ) {\n    refs = attrs.references;\n  }\n\n  var html = convert_tree_to_html( input, refs , options );\n  merge_text_nodes( html );\n  return html;\n};\n\n// For Spidermonkey based engines\nfunction mk_block_toSource() {\n  return \"Markdown.mk_block( \" +\n          uneval(this.toString()) +\n          \", \" +\n          uneval(this.trailing) +\n          \", \" +\n          uneval(this.lineNumber) +\n          \" )\";\n}\n\n// node\nfunction mk_block_inspect() {\n  var util = require(\"util\");\n  return \"Markdown.mk_block( \" +\n          util.inspect(this.toString()) +\n          \", \" +\n          util.inspect(this.trailing) +\n          \", \" +\n          util.inspect(this.lineNumber) +\n          \" )\";\n\n}\n\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\n  // Be helpful for default case in tests.\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\n\n  var s = new String(block);\n  s.trailing = trail;\n  // To make it clear its not just a string\n  s.inspect = mk_block_inspect;\n  s.toSource = mk_block_toSource;\n\n  if ( line != undefined )\n    s.lineNumber = line;\n\n  return s;\n};\n\nfunction count_lines( str ) {\n  var n = 0, i = -1;\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\n  return n;\n}\n\n// Internal - split source into rough blocks\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n  // [\\s\\S] matches _anything_ (newline or space)\n  // [^] is equivalent but doesn't work in IEs.\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n\n  var line_no = 1;\n\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\n    // skip (but count) leading blank lines\n    line_no += count_lines( m[0] );\n    re.lastIndex = m[0].length;\n  }\n\n  while ( ( m = re.exec(input) ) !== null ) {\n    if (m[2] == \"\\n#\") {\n      m[2] = \"\\n\";\n      re.lastIndex--;\n    }\n    blocks.push( mk_block( m[1], m[2], line_no ) );\n    line_no += count_lines( m[0] );\n  }\n\n  return blocks;\n};\n\n/**\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n *  - block (String): the block to process\n *  - next (Array): the following blocks\n *\n * Process `block` and return an array of JsonML nodes representing `block`.\n *\n * It does this by asking each block level function in the dialect to process\n * the block until one can. Succesful handling is indicated by returning an\n * array (with zero or more JsonML nodes), failure by a false value.\n *\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\n * themselves as appropriate.\n *\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\n * can adjust `next` in place using shift/splice etc.\n *\n * If any of this default behaviour is not right for the dialect, you can\n * define a `__call__` method on the dialect that will get invoked to handle\n * the block processing.\n */\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\n  var cbs = this.dialect.block,\n      ord = cbs.__order__;\n\n  if ( \"__call__\" in cbs ) {\n    return cbs.__call__.call(this, block, next);\n  }\n\n  for ( var i = 0; i < ord.length; i++ ) {\n    //D:this.debug( \"Testing\", ord[i] );\n    var res = cbs[ ord[i] ].call( this, block, next );\n    if ( res ) {\n      //D:this.debug(\"  matched\");\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\n        this.debug(ord[i], \"didn't return a proper array\");\n      //D:this.debug( \"\" );\n      return res;\n    }\n  }\n\n  // Uhoh! no match! Should we throw an error?\n  return [];\n};\n\nMarkdown.prototype.processInline = function processInline( block ) {\n  return this.dialect.inline.__call__.call( this, String( block ) );\n};\n\n/**\n *  Markdown#toTree( source ) -> JsonML\n *  - source (String): markdown source to parse\n *\n *  Parse `source` into a JsonML tree representing the markdown document.\n **/\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\n\n  // Make tree a member variable so its easier to mess with in extensions\n  var old_tree = this.tree;\n  try {\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\n\n    blocks:\n    while ( blocks.length ) {\n      var b = this.processBlock( blocks.shift(), blocks );\n\n      // Reference blocks and the like won't return any content\n      if ( !b.length ) continue blocks;\n\n      this.tree.push.apply( this.tree, b );\n    }\n    return this.tree;\n  }\n  finally {\n    if ( custom_root ) {\n      this.tree = old_tree;\n    }\n  }\n};\n\n// Noop by default\nMarkdown.prototype.debug = function () {\n  var args = Array.prototype.slice.call( arguments);\n  args.unshift(this.debug_indent);\n  if ( typeof print !== \"undefined\" )\n      print.apply( print, args );\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\n      console.log.apply( null, args );\n}\n\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\n  // Dont use /g regexps with this\n  var m,\n      b = block.valueOf();\n\n  while ( b.length && (m = re.exec(b) ) != null ) {\n    b = b.substr( m[0].length );\n    cb.call(this, m);\n  }\n  return b;\n};\n\n/**\n * Markdown.dialects\n *\n * Namespace of built-in dialects.\n **/\nMarkdown.dialects = {};\n\n/**\n * Markdown.dialects.Gruber\n *\n * The default dialect that follows the rules set out by John Gruber's\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\n * that script which in some places is not exactly what the syntax web page\n * says.\n **/\nMarkdown.dialects.Gruber = {\n  block: {\n    atxHeader: function atxHeader( block, next ) {\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var header = [ \"header\", { level: m[ 1 ].length } ];\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    setextHeader: function setextHeader( block, next ) {\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    code: function code( block, next ) {\n      // |    Foo\n      // |bar\n      // should be a code block followed by a paragraph. Fun\n      //\n      // There might also be adjacent code block to merge.\n\n      var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n      // 4 spaces + content\n      if ( !block.match( re ) ) return undefined;\n\n      block_search:\n      do {\n        // Now pull out the rest of the lines\n        var b = this.loop_re_over_block(\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\n\n        if ( b.length ) {\n          // Case alluded to in first comment. push it back on as a new block\n          next.unshift( mk_block(b, block.trailing) );\n          break block_search;\n        }\n        else if ( next.length ) {\n          // Check the next block - it might be code too\n          if ( !next[0].match( re ) ) break block_search;\n\n          // Pull how how many blanks lines follow - minus two to account for .join\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\n\n          block = next.shift();\n        }\n        else {\n          break block_search;\n        }\n      } while ( true );\n\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\n    },\n\n    horizRule: function horizRule( block, next ) {\n      // this needs to find any hr in the block to handle abutting blocks\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\n\n      if ( !m ) {\n        return undefined;\n      }\n\n      var jsonml = [ [ \"hr\" ] ];\n\n      // if there's a leading abutting block, process it\n      if ( m[ 1 ] ) {\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\n      }\n\n      // if there's a trailing abutting block, stick it into next\n      if ( m[ 3 ] ) {\n        next.unshift( mk_block( m[ 3 ] ) );\n      }\n\n      return jsonml;\n    },\n\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\n    // between the items (and result in text just in the <li>) and loose lists,\n    // which have an empty line between list items, resulting in (one or more)\n    // paragraphs inside the <li>.\n    //\n    // There are all sorts weird edge cases about the original markdown.pl's\n    // handling of lists:\n    //\n    // * Nested lists are supposed to be indented by four chars per level. But\n    //   if they aren't, you can get a nested list by indenting by less than\n    //   four so long as the indent doesn't match an indent of an existing list\n    //   item in the 'nest stack'.\n    //\n    // * The type of the list (bullet or number) is controlled just by the\n    //    first item at the indent. Subsequent changes are ignored unless they\n    //    are for nested lists\n    //\n    lists: (function( ) {\n      // Use a closure to hide a few variables.\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n      // TODO: Cache this regexp for certain depths.\n      // Create a regexp suitable for matching an li for a given stack depth\n      function regex_for_depth( depth ) {\n\n        return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\n        );\n      }\n      function expand_tab( input ) {\n        return input.replace( / {0,3}\\t/g, \"    \" );\n      }\n\n      // Add inline content `inline` to `li`. inline comes from processInline\n      // so is an array of content\n      function add(li, loose, inline, nl) {\n        if ( loose ) {\n          li.push( [ \"para\" ].concat(inline) );\n          return;\n        }\n        // Hmmm, should this be any block level element or just paras?\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\n                   ? li[li.length -1]\n                   : li;\n\n        // If there is already some content in this list, add the new line in\n        if ( nl && li.length > 1 ) inline.unshift(nl);\n\n        for ( var i = 0; i < inline.length; i++ ) {\n          var what = inline[i],\n              is_str = typeof what == \"string\";\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\n            add_to[ add_to.length-1 ] += what;\n          }\n          else {\n            add_to.push( what );\n          }\n        }\n      }\n\n      // contained means have an indent greater than the current one. On\n      // *every* line in the block\n      function get_contained_blocks( depth, blocks ) {\n\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n\n        while ( blocks.length > 0 ) {\n          if ( re.exec( blocks[0] ) ) {\n            var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace( replace, \"\");\n\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\n          }\n          else {\n            break;\n          }\n        }\n        return ret;\n      }\n\n      // passed to stack.forEach to turn list items up the stack into paras\n      function paragraphify(s, i, stack) {\n        var list = s.list;\n        var last_li = list[list.length-1];\n\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\n          return;\n        }\n        if ( i + 1 == stack.length ) {\n          // Last stack frame\n          // Keep the same array, but replace the contents\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\n        }\n        else {\n          var sublist = last_li.pop();\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\n        }\n      }\n\n      // The matcher function\n      return function( block, next ) {\n        var m = block.match( is_list_re );\n        if ( !m ) return undefined;\n\n        function make_list( m ) {\n          var list = bullet_list.exec( m[2] )\n                   ? [\"bulletlist\"]\n                   : [\"numberlist\"];\n\n          stack.push( { list: list, indent: m[1] } );\n          return list;\n        }\n\n\n        var stack = [], // Stack of lists for nesting.\n            list = make_list( m ),\n            last_li,\n            loose = false,\n            ret = [ stack[0].list ],\n            i;\n\n        // Loop to search over block looking for inner block elements and loose lists\n        loose_search:\n        while ( true ) {\n          // Split into lines preserving new lines at end of line\n          var lines = block.split( /(?=\\n)/ );\n\n          // We have to grab all lines for a li and call processInline on them\n          // once as there are some inline things that can span lines.\n          var li_accumulate = \"\";\n\n          // Loop over the lines in this block looking for tight lists.\n          tight_search:\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\n            var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\n\n            // TODO: really should cache this\n            var line_re = regex_for_depth( stack.length );\n\n            m = l.match( line_re );\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n            // We have a list item\n            if ( m[1] !== undefined ) {\n              // Process the previous list item, if any\n              if ( li_accumulate.length ) {\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\n                // Loose mode will have been dealt with. Reset it\n                loose = false;\n                li_accumulate = \"\";\n              }\n\n              m[1] = expand_tab( m[1] );\n              var wanted_depth = Math.floor(m[1].length/4)+1;\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n              if ( wanted_depth > stack.length ) {\n                // Deep enough for a nested list outright\n                //print ( \"new nested list\" );\n                list = make_list( m );\n                last_li.push( list );\n                last_li = list[1] = [ \"listitem\" ];\n              }\n              else {\n                // We aren't deep enough to be strictly a new level. This is\n                // where Md.pl goes nuts. If the indent matches a level in the\n                // stack, put it there, else put it one deeper then the\n                // wanted_depth deserves.\n                var found = false;\n                for ( i = 0; i < stack.length; i++ ) {\n                  if ( stack[ i ].indent != m[1] ) continue;\n                  list = stack[ i ].list;\n                  stack.splice( i+1, stack.length - (i+1) );\n                  found = true;\n                  break;\n                }\n\n                if (!found) {\n                  //print(\"not found. l:\", uneval(l));\n                  wanted_depth++;\n                  if ( wanted_depth <= stack.length ) {\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                    list = stack[wanted_depth-1].list;\n                    //print(\"list:\", uneval(list) );\n                  }\n                  else {\n                    //print (\"made new stack for messy indent\");\n                    list = make_list(m);\n                    last_li.push(list);\n                  }\n                }\n\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                last_li = [ \"listitem\" ];\n                list.push(last_li);\n              } // end depth of shenegains\n              nl = \"\";\n            }\n\n            // Add content\n            if ( l.length > m[0].length ) {\n              li_accumulate += nl + l.substr( m[0].length );\n            }\n          } // tight_search\n\n          if ( li_accumulate.length ) {\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\n            // Loose mode will have been dealt with. Reset it\n            loose = false;\n            li_accumulate = \"\";\n          }\n\n          // Look at the next block - we might have a loose list. Or an extra\n          // paragraph for the current li\n          var contained = get_contained_blocks( stack.length, next );\n\n          // Deal with code blocks or properly nested lists\n          if ( contained.length > 0 ) {\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\n          }\n\n          var next_block = next[0] && next[0].valueOf() || \"\";\n\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\n            block = next.shift();\n\n            // Check for an HR following a list: features/lists/hr_abutting\n            var hr = this.dialect.block.horizRule( block, next );\n\n            if ( hr ) {\n              ret.push.apply(ret, hr);\n              break;\n            }\n\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            loose = true;\n            continue loose_search;\n          }\n          break;\n        } // loose_search\n\n        return ret;\n      };\n    })(),\n\n    blockquote: function blockquote( block, next ) {\n      if ( !block.match( /^>/m ) )\n        return undefined;\n\n      var jsonml = [];\n\n      // separate out the leading abutting block, if any. I.e. in this case:\n      //\n      //  a\n      //  > b\n      //\n      if ( block[ 0 ] != \">\" ) {\n        var lines = block.split( /\\n/ ),\n            prev = [],\n            line_no = block.lineNumber;\n\n        // keep shifting lines until you find a crotchet\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\n            prev.push( lines.shift() );\n            line_no++;\n        }\n\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\n        // reassemble new block of just block quotes!\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\n      }\n\n\n      // if the next block is also a blockquote merge it in\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\n        var b = next.shift();\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\n      }\n\n      // Strip off the leading \"> \" and re-process as a block.\n      var input = block.replace( /^> ?/gm, \"\" ),\n          old_tree = this.tree,\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\n          attr = extract_attr( processedBlock );\n\n      // If any link references were found get rid of them\n      if ( attr && attr.references ) {\n        delete attr.references;\n        // And then remove the attribute object if it's empty\n        if ( isEmpty( attr ) ) {\n          processedBlock.splice( 1, 1 );\n        }\n      }\n\n      jsonml.push( processedBlock );\n      return jsonml;\n    },\n\n    referenceDefn: function referenceDefn( block, next) {\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n      // interesting matches are [ , ref_id, url, , title, title ]\n\n      if ( !block.match(re) )\n        return undefined;\n\n      // make an attribute node if it doesn't exist\n      if ( !extract_attr( this.tree ) ) {\n        this.tree.splice( 1, 0, {} );\n      }\n\n      var attrs = extract_attr( this.tree );\n\n      // make a references hash if it doesn't exist\n      if ( attrs.references === undefined ) {\n        attrs.references = {};\n      }\n\n      var b = this.loop_re_over_block(re, block, function( m ) {\n\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\n          href: m[2]\n        };\n\n        if ( m[4] !== undefined )\n          ref.title = m[4];\n        else if ( m[5] !== undefined )\n          ref.title = m[5];\n\n      } );\n\n      if ( b.length )\n        next.unshift( mk_block( b, block.trailing ) );\n\n      return [];\n    },\n\n    para: function para( block, next ) {\n      // everything's a para!\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\n    }\n  }\n};\n\nMarkdown.dialects.Gruber.inline = {\n\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\n      var m,\n          res,\n          lastIndex = 0;\n\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\n\n      m = re.exec( text );\n      if (!m) {\n        // Just boring text\n        return [ text.length, text ];\n      }\n      else if ( m[1] ) {\n        // Some un-interesting text matched. Return that first\n        return [ m[1].length, m[1] ];\n      }\n\n      var res;\n      if ( m[2] in this.dialect.inline ) {\n        res = this.dialect.inline[ m[2] ].call(\n                  this,\n                  text.substr( m.index ), m, previous_nodes || [] );\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [ m[2].length, m[2] ];\n      return res;\n    },\n\n    __call__: function inline( text, patterns ) {\n\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\n          out[ out.length-1 ] += x;\n        else\n          out.push(x);\n      }\n\n      while ( text.length > 0 ) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\n        text = text.substr( res.shift() );\n        forEach(res, add )\n      }\n\n      return out;\n    },\n\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n\n    \"\\\\\": function escaped( text ) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if ( this.dialect.inline.__escape__.exec( text ) )\n        return [ 2, text.charAt( 1 ) ];\n      else\n        // Not an esacpe\n        return [ 1, \"\\\\\" ];\n    },\n\n    \"![\": function image( text ) {\n\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\n\n      if ( m ) {\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\n\n        var attrs = { alt: m[1], href: m[2] || \"\" };\n        if ( m[4] !== undefined)\n          attrs.title = m[4];\n\n        return [ m[0].length, [ \"img\", attrs ] ];\n      }\n\n      // ![Alt text][id]\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\n\n      if ( m ) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\n      }\n\n      // Just consume the '!['\n      return [ 2, \"![\" ];\n    },\n\n    \"[\": function link( text ) {\n\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\n\n      // No closing ']' found. Just consume the [\n      if ( !res ) return [ 1, \"[\" ];\n\n      var consumed = 1 + res[ 0 ],\n          children = res[ 1 ],\n          link,\n          attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr( consumed );\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\n      if ( m ) {\n        var url = m[1];\n        consumed += m[0].length;\n\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\n          url = url.substring( 1, url.length - 1 );\n\n        // If there is a title we don't have to worry about parens in the url\n        if ( !m[3] ) {\n          var open_parens = 1; // One open that isn't in the capture\n          for ( var len = 0; len < url.length; len++ ) {\n            switch ( url[len] ) {\n            case \"(\":\n              open_parens++;\n              break;\n            case \")\":\n              if ( --open_parens == 0) {\n                consumed -= url.length - len;\n                url = url.substring(0, len);\n              }\n              break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\n\n        attrs = { href: url || \"\" };\n        if ( m[3] !== undefined)\n          attrs.title = m[3];\n\n        link = [ \"link\", attrs ].concat( children );\n        return [ consumed, link ];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\n\n      if ( m ) {\n\n        consumed += m[ 0 ].length;\n\n        // [links][] uses links as its reference\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\n\n        link = [ \"link_ref\", attrs ].concat( children );\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [ consumed, link ];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\n\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\n        link = [ \"link_ref\", attrs, children[0] ];\n        return [ consumed, link ];\n      }\n\n      // Just consume the \"[\"\n      return [ 1, \"[\" ];\n    },\n\n\n    \"<\": function autoLink( text ) {\n      var m;\n\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\n        if ( m[3] ) {\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\n\n        }\n        else if ( m[2] == \"mailto\" ) {\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\n        }\n        else\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\n      }\n\n      return [ 1, \"<\" ];\n    },\n\n    \"`\": function inlineCode( text ) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\n\n      if ( m && m[2] )\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\n      else {\n        // TODO: No matching end code found - warn!\n        return [ 1, \"`\" ];\n      }\n    },\n\n    \"  \\n\": function lineBreak( text ) {\n      return [ 3, [ \"linebreak\" ] ];\n    }\n\n};\n\n// Meta Helper/generator method for em and strong handling\nfunction strong_em( tag, md ) {\n\n  var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n  function CloseTag(len) {\n    this.len_after = len;\n    this.name = \"close_\" + md;\n  }\n\n  return function ( text, orig_match ) {\n\n    if ( this[state_slot][0] == md ) {\n      // Most recent em is of this type\n      //D:this.debug(\"closing\", md);\n      this[state_slot].shift();\n\n      // \"Consume\" everything to go back to the recrusion in the else-block below\n      return[ text.length, new CloseTag(text.length-md.length) ];\n    }\n    else {\n      // Store a clone of the em/strong states\n      var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n\n      this[state_slot].unshift(md);\n\n      //D:this.debug_indent += \"  \";\n\n      // Recurse\n      var res = this.processInline( text.substr( md.length ) );\n      //D:this.debug_indent = this.debug_indent.substr(2);\n\n      var last = res[res.length - 1];\n\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n      var check = this[state_slot].shift();\n      if ( last instanceof CloseTag ) {\n        res.pop();\n        // We matched! Huzzah.\n        var consumed = text.length - last.len_after;\n        return [ consumed, [ tag ].concat(res) ];\n      }\n      else {\n        // Restore the state of the other kind. We might have mistakenly closed it.\n        this[other_slot] = other;\n        this[state_slot] = state;\n\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\n        return [ md.length, md ];\n      }\n    }\n  }; // End returned function\n}\n\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\n\n\n// Build default order from insertion order.\nMarkdown.buildBlockOrder = function(d) {\n  var ord = [];\n  for ( var i in d ) {\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\n    ord.push( i );\n  }\n  d.__order__ = ord;\n};\n\n// Build patterns for inline matcher\nMarkdown.buildInlinePatterns = function(d) {\n  var patterns = [];\n\n  for ( var i in d ) {\n    // __foo__ is reserved and not a pattern\n    if ( i.match( /^__.*__$/) ) continue;\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\n             .replace( /\\n/, \"\\\\n\" );\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\n  }\n\n  patterns = patterns.join(\"|\");\n  d.__patterns__ = patterns;\n  //print(\"patterns:\", uneval( patterns ) );\n\n  var fn = d.__call__;\n  d.__call__ = function(text, pattern) {\n    if ( pattern != undefined ) {\n      return fn.call(this, text, pattern);\n    }\n    else\n    {\n      return fn.call(this, text, patterns);\n    }\n  };\n};\n\nMarkdown.DialectHelpers = {};\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\n  var consumed = 0,\n      nodes = [];\n\n  while ( true ) {\n    if ( text.charAt( consumed ) == want ) {\n      // Found the character we were looking for\n      consumed++;\n      return [ consumed, nodes ];\n    }\n\n    if ( consumed >= text.length ) {\n      // No closing char found. Abort.\n      return null;\n    }\n\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\n    consumed += res[ 0 ];\n    // Add any returned nodes.\n    nodes.push.apply( nodes, res.slice( 1 ) );\n  }\n}\n\n// Helper function to make sub-classing a dialect easier\nMarkdown.subclassDialect = function( d ) {\n  function Block() {}\n  Block.prototype = d.block;\n  function Inline() {}\n  Inline.prototype = d.inline;\n\n  return { block: new Block(), inline: new Inline() };\n};\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\n\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\n\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\n  var meta = split_meta_hash( meta_string ),\n      attr = {};\n\n  for ( var i = 0; i < meta.length; ++i ) {\n    // id: #foo\n    if ( /^#/.test( meta[ i ] ) ) {\n      attr.id = meta[ i ].substring( 1 );\n    }\n    // class: .foo\n    else if ( /^\\./.test( meta[ i ] ) ) {\n      // if class already exists, append the new one\n      if ( attr[\"class\"] ) {\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\n      }\n      else {\n        attr[\"class\"] = meta[ i ].substring( 1 );\n      }\n    }\n    // attribute: foo=bar\n    else if ( /\\=/.test( meta[ i ] ) ) {\n      var s = meta[ i ].split( /\\=/ );\n      attr[ s[ 0 ] ] = s[ 1 ];\n    }\n  }\n\n  return attr;\n}\n\nfunction split_meta_hash( meta_string ) {\n  var meta = meta_string.split( \"\" ),\n      parts = [ \"\" ],\n      in_quotes = false;\n\n  while ( meta.length ) {\n    var letter = meta.shift();\n    switch ( letter ) {\n      case \" \" :\n        // if we're in a quoted section, keep it\n        if ( in_quotes ) {\n          parts[ parts.length - 1 ] += letter;\n        }\n        // otherwise make a new part\n        else {\n          parts.push( \"\" );\n        }\n        break;\n      case \"'\" :\n      case '\"' :\n        // reverse the quotes and move straight on\n        in_quotes = !in_quotes;\n        break;\n      case \"\\\\\" :\n        // shift off the next letter to be used straight away.\n        // it was escaped so we'll keep it whatever it is\n        letter = meta.shift();\n      default :\n        parts[ parts.length - 1 ] += letter;\n        break;\n    }\n  }\n\n  return parts;\n}\n\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\n  // we're only interested in the first block\n  if ( block.lineNumber > 1 ) return undefined;\n\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\n\n  // make an attribute node if it doesn't exist\n  if ( !extract_attr( this.tree ) ) {\n    this.tree.splice( 1, 0, {} );\n  }\n\n  var pairs = block.split( /\\n/ );\n  for ( p in pairs ) {\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\n        key = m[ 1 ].toLowerCase(),\n        value = m[ 2 ];\n\n    this.tree[ 1 ][ key ] = value;\n  }\n\n  // document_meta produces no content!\n  return [];\n};\n\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\n  // check if the last line of the block is an meta hash\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\n  if ( !m ) return undefined;\n\n  // process the meta hash\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\n\n  var hash;\n\n  // if we matched ^ then we need to apply meta to the previous block\n  if ( m[ 1 ] === \"\" ) {\n    var node = this.tree[ this.tree.length - 1 ];\n    hash = extract_attr( node );\n\n    // if the node is a string (rather than JsonML), bail\n    if ( typeof node === \"string\" ) return undefined;\n\n    // create the attribute hash if it doesn't exist\n    if ( !hash ) {\n      hash = {};\n      node.splice( 1, 0, hash );\n    }\n\n    // add the attributes in\n    for ( a in attr ) {\n      hash[ a ] = attr[ a ];\n    }\n\n    // return nothing so the meta hash is removed\n    return [];\n  }\n\n  // pull the meta hash off the block and process what's left\n  var b = block.replace( /\\n.*$/, \"\" ),\n      result = this.processBlock( b, [] );\n\n  // get or make the attributes hash\n  hash = extract_attr( result[ 0 ] );\n  if ( !hash ) {\n    hash = {};\n    result[ 0 ].splice( 1, 0, hash );\n  }\n\n  // attach the attributes to the block\n  for ( a in attr ) {\n    hash[ a ] = attr[ a ];\n  }\n\n  return result;\n};\n\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\n  // one or more terms followed by one or more definitions, in a single block\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [ \"dl\" ],\n      i, m;\n\n  // see if we're dealing with a tight or loose block\n  if ( ( m = block.match( tight ) ) ) {\n    // pull subsequent tight DL blocks out of `next`\n    var blocks = [ block ];\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\n      blocks.push( next.shift() );\n    }\n\n    for ( var b = 0; b < blocks.length; ++b ) {\n      var m = blocks[ b ].match( tight ),\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\n          defns = m[ 2 ].split( /\\n:\\s+/ );\n\n      // print( uneval( m ) );\n\n      for ( i = 0; i < terms.length; ++i ) {\n        list.push( [ \"dt\", terms[ i ] ] );\n      }\n\n      for ( i = 0; i < defns.length; ++i ) {\n        // run inline processing over the definition\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\n      }\n    }\n  }\n  else {\n    return undefined;\n  }\n\n  return [ list ];\n};\n\n// splits on unescaped instances of @ch. If @ch is not a character the result\n// can be unpredictable\n\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\n\n    var _split_on_unescaped = function(s, ch) {\n        ch = ch || '\\\\s';\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\n        var res = [ ],\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n            m;\n        while(m = s.match(r)) {\n            res.push(m[1]);\n            s = m[2];\n        }\n        res.push(s);\n        return res;\n    }\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i, m;\n    if (m = block.match(leading_pipe)) {\n        // remove leading pipes in contents\n        // (header and horizontal rule already have the leading pipe left out)\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (! ( m = block.match(no_leading_pipe))) {\n        return undefined;\n    }\n\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [ ];\n    forEach (m[2], function (s) {\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\n        else                              html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\n            this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n        var html_row = ['tr'];\n        row = _split_on_unescaped(row, '|');\n        for (i = 0; i < row.length; i++) {\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n        }\n        table[2].push(html_row);\n    }, this);\n\n    return [table];\n}\n\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\n  if ( !out.length ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // get the preceeding element\n  var before = out[ out.length - 1 ];\n\n  if ( typeof before === \"string\" ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // match a meta hash\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\n\n  // no match, false alarm\n  if ( !m ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // attach the attributes to the preceeding element\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\n      attr = extract_attr( before );\n\n  if ( !attr ) {\n    attr = {};\n    before.splice( 1, 0, attr );\n  }\n\n  for ( var k in meta ) {\n    attr[ k ] = meta[ k ];\n  }\n\n  // cut out the string and replace it with nothing\n  return [ m[ 0 ].length, \"\" ];\n};\n\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n};\n\nvar forEach;\n// Don't mess with Array.prototype. Its not friendly\nif ( Array.prototype.forEach ) {\n  forEach = function( arr, cb, thisp ) {\n    return arr.forEach( cb, thisp );\n  };\n}\nelse {\n  forEach = function(arr, cb, thisp) {\n    for (var i = 0; i < arr.length; i++) {\n      cb.call(thisp || arr, arr[i], i, arr);\n    }\n  }\n}\n\nvar isEmpty = function( obj ) {\n  for ( var key in obj ) {\n    if ( hasOwnProperty.call( obj, key ) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction extract_attr( jsonml ) {\n  return isArray(jsonml)\n      && jsonml.length > 1\n      && typeof jsonml[ 1 ] === \"object\"\n      && !( isArray(jsonml[ 1 ]) )\n      ? jsonml[ 1 ]\n      : undefined;\n}\n\n\n\n/**\n *  renderJsonML( jsonml[, options] ) -> String\n *  - jsonml (Array): JsonML array to render to XML\n *  - options (Object): options\n *\n *  Converts the given JsonML into well-formed XML.\n *\n *  The options currently understood are:\n *\n *  - root (Boolean): wether or not the root node should be included in the\n *    output, or just its children. The default `false` is to not include the\n *    root itself.\n */\nexpose.renderJsonML = function( jsonml, options ) {\n  options = options || {};\n  // include the root element in the rendered output?\n  options.root = options.root || false;\n\n  var content = [];\n\n  if ( options.root ) {\n    content.push( render_tree( jsonml ) );\n  }\n  else {\n    jsonml.shift(); // get rid of the tag\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n      jsonml.shift(); // get rid of the attributes\n    }\n\n    while ( jsonml.length ) {\n      content.push( render_tree( jsonml.shift() ) );\n    }\n  }\n\n  return content.join( \"\\n\\n\" );\n};\n\nfunction escapeHTML( text ) {\n  return text.replace( /&/g, \"&amp;\" )\n             .replace( /</g, \"&lt;\" )\n             .replace( />/g, \"&gt;\" )\n             .replace( /\"/g, \"&quot;\" )\n             .replace( /'/g, \"&#39;\" );\n}\n\nfunction render_tree( jsonml ) {\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return escapeHTML( jsonml );\n  }\n\n  var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( render_tree( jsonml.shift() ) );\n  }\n\n  var tag_attrs = \"\";\n  for ( var a in attributes ) {\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\n    return \"<\"+ tag + tag_attrs + \"/>\";\n  }\n  else {\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\n  }\n}\n\nfunction convert_tree_to_html( tree, references, options ) {\n  var i;\n  options = options || {};\n\n  // shallow clone\n  var jsonml = tree.slice( 0 );\n\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n  }\n\n  // Clone attributes if they exist\n  var attrs = extract_attr( jsonml );\n  if ( attrs ) {\n    jsonml[ 1 ] = {};\n    for ( i in attrs ) {\n      jsonml[ 1 ][ i ] = attrs[ i ];\n    }\n    attrs = jsonml[ 1 ];\n  }\n\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return jsonml;\n  }\n\n  // convert this node\n  switch ( jsonml[ 0 ] ) {\n    case \"header\":\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\n      delete jsonml[ 1 ].level;\n      break;\n    case \"bulletlist\":\n      jsonml[ 0 ] = \"ul\";\n      break;\n    case \"numberlist\":\n      jsonml[ 0 ] = \"ol\";\n      break;\n    case \"listitem\":\n      jsonml[ 0 ] = \"li\";\n      break;\n    case \"para\":\n      jsonml[ 0 ] = \"p\";\n      break;\n    case \"markdown\":\n      jsonml[ 0 ] = \"html\";\n      if ( attrs ) delete attrs.references;\n      break;\n    case \"code_block\":\n      jsonml[ 0 ] = \"pre\";\n      i = attrs ? 2 : 1;\n      var code = [ \"code\" ];\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\n      jsonml[ i ] = code;\n      break;\n    case \"inlinecode\":\n      jsonml[ 0 ] = \"code\";\n      break;\n    case \"img\":\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\n      delete jsonml[ 1 ].href;\n      break;\n    case \"linebreak\":\n      jsonml[ 0 ] = \"br\";\n    break;\n    case \"link\":\n      jsonml[ 0 ] = \"a\";\n      break;\n    case \"link_ref\":\n      jsonml[ 0 ] = \"a\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.href = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n    case \"img_ref\":\n      jsonml[ 0 ] = \"img\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.src = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n  }\n\n  // convert all the children\n  i = 1;\n\n  // deal with the attribute node, if it exists\n  if ( attrs ) {\n    // if there are keys, skip over it\n    for ( var key in jsonml[ 1 ] ) {\n        i = 2;\n        break;\n    }\n    // if there aren't, remove it\n    if ( i === 1 ) {\n      jsonml.splice( i, 1 );\n    }\n  }\n\n  for ( ; i < jsonml.length; ++i ) {\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\n  }\n\n  return jsonml;\n}\n\n\n// merges adjacent text nodes into a single node\nfunction merge_text_nodes( jsonml ) {\n  // skip the tag name and attribute hash\n  var i = extract_attr( jsonml ) ? 2 : 1;\n\n  while ( i < jsonml.length ) {\n    // if it's a string check the next item too\n    if ( typeof jsonml[ i ] === \"string\" ) {\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\n        // merge the second string into the first and remove it\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\n      }\n      else {\n        ++i;\n      }\n    }\n    // if it's not a string recurse\n    else {\n      merge_text_nodes( jsonml[ i ] );\n      ++i;\n    }\n  }\n}\n\n} )( (function() {\n  if ( typeof exports === \"undefined\" ) {\n    window.markdown = {};\n    return window.markdown;\n  }\n  else {\n    return exports;\n  }\n} )() );\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}